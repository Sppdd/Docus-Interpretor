name: Framework Data Import
on:
  workflow_dispatch:  # Manual trigger only

jobs:
  scheduled:
    runs-on: ubuntu-latest
    env:
      NEO4J_URI: ${{ secrets.NEO4J_URI }}
      NEO4J_USER: ${{ secrets.NEO4J_USERNAME }}
      NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
    
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      
      - name: Install jq
        run: sudo apt-get install jq

      - name: Clone and Process Framework Code
        run: |
          git clone https://github.com/hypermodeinc/modus.git
          cd modus
          # Create nodes and relationships data structure
          echo '{"nodes": [], "relationships": []}' > ../framework_data.json
          
          # Process each file and create nodes
          find . -type f -not -path '*/\.*' -print0 | while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            directory=$(dirname "$file")
            content=$(cat "$file" | base64)
            extension="${filename##*.}"
            
            # Create file node
            jq --arg path "$file" \
               --arg filename "$filename" \
               --arg dir "$directory" \
               --arg content "$content" \
               --arg ext "$extension" \
               --arg type "file" \
               '.nodes += [{
                  "type": $type,
                  "path": $path,
                  "filename": $filename,
                  "directory": $dir,
                  "content": $content,
                  "extension": $ext
                }]' ../framework_data.json > temp.json && mv temp.json ../framework_data.json
            
            # Create directory nodes and relationships
            current_dir=""
            for dir in $(echo "$directory" | tr '/' ' '); do
              if [ -z "$current_dir" ]; then
                current_dir="$dir"
              else
                current_dir="$current_dir/$dir"
              fi
              
              # Add directory node
              jq --arg path "$current_dir" \
                 --arg type "directory" \
                 '.nodes += [{
                    "type": $type,
                    "path": $path
                  }]' ../framework_data.json > temp.json && mv temp.json ../framework_data.json
            done
          done
          cd ..

      - name: Clone and Process Framework Docs
        run: |
          git clone https://github.com/hypermodeinc/docs.git
          cd docs
          # Process documentation files
          find . -type f -not -path '*/\.*' -print0 | while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            directory=$(dirname "$file")
            content=$(cat "$file" | base64)
            extension="${filename##*.}"
            
            # Create documentation node
            jq --arg path "$file" \
               --arg filename "$filename" \
               --arg dir "$directory" \
               --arg content "$content" \
               --arg ext "$extension" \
               --arg type "documentation" \
               '.nodes += [{
                  "type": $type,
                  "path": $path,
                  "filename": $filename,
                  "directory": $dir,
                  "content": $content,
                  "extension": $ext
                }]' ../framework_data.json > temp.json && mv temp.json ../framework_data.json
          done
          cd ..

      - name: Create Relationships
        run: |
          jq '.relationships = [
            .nodes[] | 
            select(.type == "file" or .type == "documentation") | 
            {
              "start": .path,
              "end": .directory,
              "type": "CONTAINS"
            }
          ]' framework_data.json > temp.json && mv temp.json framework_data.json

      - name: Neo4j Import
        uses: johnymontana/flat-graph@v1.2
        with:
          neo4j-uri: ${{ secrets.NEO4J_URI }}
          neo4j-user: ${{ secrets.NEO4J_USERNAME }}
          neo4j-password: ${{ secrets.NEO4J_PASSWORD }}
          file: framework_data.json
